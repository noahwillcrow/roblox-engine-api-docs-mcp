# --- Stage 1: Base ---
# Use a specific Python version to ensure consistency.
FROM python:3.11-slim as base

ENV PYTHONUNBUFFERED=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_CREATE=true \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_HOME="/opt/poetry" \
    PATH="/opt/poetry/bin:$PATH" \
    PYTHONPATH="/app/src:$PYTHONPATH" \
    NLTK_DATA="/usr/local/nltk_data"

# Install poetry
RUN apt-get update && apt-get install -y curl && \
    curl -sSL https://install.python-poetry.org | python - && \
    apt-get remove -y curl && apt-get clean && rm -rf /var/lib/apt/lists/*

# --- Stage 2: Builder ---
# This stage installs all dependencies. It's cached as long as pyproject.toml/poetry.lock don't change.
FROM base as builder

WORKDIR /app

# Install build-essential for packages that need to compile C extensions
RUN apt-get update && apt-get install -y build-essential git && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

COPY pyproject.toml ./
RUN poetry install --no-root && \
    rm -rf /root/.cache/pypoetry

# --- Stage 3: Ingester ---
# This stage runs the slow data ingestion process. It's cached as long as the ingestion code doesn't change.
FROM builder as ingester

WORKDIR /app

COPY ./src /app/src

# Set the data path for the Qdrant database
ENV QDRANT_DATA_PATH="/app/qdrant_data"

# Run the ingestion script
RUN poetry run python -c "import nltk; nltk.download('punkt'); nltk.download('punkt_tab'); nltk.download('averaged_perceptron_tagger'); nltk.download('averaged_perceptron_tagger_eng'); nltk.download('stopwords'); nltk.download('wordnet'); nltk.download('omw-1.4'); nltk.download('maxent_ne_chunker'); nltk.download('words')" && \
    poetry run python -m ingestion.main && \
    rm -rf /usr/local/nltk_data