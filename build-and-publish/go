#!/bin/bash

# A script to build and publish the Docker image for the Roblox Engine API Docs MCP Server.
#
# This script is a consolidation of the steps formerly found in `LOCAL_BUILD.md`.
# It provides a parameterized way to build and publish the Docker image to Docker Hub.
#
# Usage:
#   ./build-and-publish/go DOCKERHUB_USERNAME [DOCKERHUB_PASSWORD_OR_PAT] [--skip-ingestion]
#
# Arguments:
#   DOCKERHUB_USERNAME: Your Docker Hub username. (Required)
#   DOCKERHUB_PASSWORD_OR_PAT: Your Docker Hub password or Personal Access Token. (Optional)
#                            If not provided, you will be prompted to enter it.
#   --skip-ingestion: (Optional) If provided, the script will skip building the ingestion Docker image.
#                     This assumes a pre-built 'roblox-engine-api-docs-mcp-ingestion:latest' image is available locally.

set -eo pipefail

# --- Functions ---

# Function to print error messages and exit
#
# Globals:
#   None
# Arguments:
#   $1: The error message to print.
# Returns:
#   None
function error_exit() {
    echo "Error: $1" >&2
    exit 1
}

# Function to check for the presence of a command.
#
# Globals:
#   None
# Arguments:
#   $1: The command to check for.
# Returns:
#   None
function command_check() {
    if ! command -v "$1" &> /dev/null; then
        error_exit "$1 is not installed. Please install it to continue."
    fi
}

# --- Main Script ---

# Check for required commands
command_check "docker"

# Ensure a buildx builder is active
if ! docker buildx inspect default &> /dev/null; then
    echo "--- Creating a new Docker Buildx builder ---"
    docker buildx create --name default || error_exit "Failed to create Docker Buildx builder."
fi

# Use the default builder
echo "--- Using Docker Buildx builder ---"
docker buildx use default || error_exit "Failed to use Docker Buildx builder."

# Set poetry command path
POETRY_CMD="poetry"
if ! command -v "poetry" &amp;> /dev/null; then
    echo "--- Poetry not found, installing... ---"
    if ! curl -sSL https://install.python-poetry.org | python -; then
        error_exit "Failed to install poetry."
    fi
    POETRY_CMD="$HOME/.local/bin/poetry"
fi

# Install dependencies for version script
echo "--- Installing script dependencies via Poetry ---"
if ! "$POETRY_CMD" install --only versioning; then
    error_exit "Failed to install dependencies with poetry."
fi

# Check for required arguments
if [ -z "$1" ]; then
    error_exit "Docker Hub username is required. Usage: ./build-and-publish/go DOCKERHUB_USERNAME [DOCKERHUB_PASSWORD_OR_PAT]"
fi

DOCKERHUB_USERNAME=""
DOCKERHUB_PASSWORD_OR_PAT=""
SKIP_INGESTION=false

for arg in "$@"; do
    case $arg in
        --skip-ingestion)
            SKIP_INGESTION=true
            shift
            ;;
        *)
            if [ -z "$DOCKERHUB_USERNAME" ]; then
                DOCKERHUB_USERNAME="$arg"
            elif [ -z "$DOCKERHUB_PASSWORD_OR_PAT" ]; then
                DOCKERHUB_PASSWORD_OR_PAT="$arg"
            fi
            shift
            ;;
    esac
done

# Check for required arguments after parsing flags
if [ -z "$DOCKERHUB_USERNAME" ]; then
    error_exit "Docker Hub username is required. Usage: ./build-and-publish/go DOCKERHUB_USERNAME [DOCKERHUB_PASSWORD_OR_PAT] [--skip-ingestion]"
fi

# Log in to Docker Hub
if [ -n "$DOCKERHUB_PASSWORD_OR_PAT" ]; then
    echo "$DOCKERHUB_PASSWORD_OR_PAT" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
else
    docker login --username "$DOCKERHUB_USERNAME"
fi

# Get the Roblox API Version
echo "--- Getting Roblox API Version ---"
VERSION=$("$POETRY_CMD" run python src/scripts/get_roblox_version.py)
if [ -z "$VERSION" ]; then
    error_exit "Failed to get Roblox API Version."
fi
echo "Roblox API Version: $VERSION"

if [ "$SKIP_INGESTION" = false ]; then
    # Build the Ingestion Docker Image (single platform)
    echo "--- Building Ingestion Docker Image ---"
    docker build -f Dockerfile.ingestion -t roblox-engine-api-docs-mcp-ingestion:latest .
else
    echo "--- Skipping Ingestion Docker Image build as --skip-ingestion flag is set ---"
    echo "--- Ensuring 'roblox-engine-api-docs-mcp-ingestion:latest' image exists locally ---"
    if ! docker image inspect roblox-engine-api-docs-mcp-ingestion:latest &> /dev/null; then
        error_exit "Ingestion image 'roblox-engine-api-docs-mcp-ingestion:latest' not found locally. Please build it or remove --skip-ingestion flag."
    fi
fi


# Build the MCP Server Docker Image for multiple platforms
echo "--- Building MCP Server Docker Image for multiple platforms ---"
# Build and push the Docker image for multiple platforms using buildx
# The --push flag automatically pushes the image to Docker Hub after building
docker buildx build \
    --platform linux/amd64,linux/arm64 \
    -t "$DOCKERHUB_USERNAME/roblox-engine-api-docs-mcp-server:latest" \
    -t "$DOCKERHUB_USERNAME/roblox-engine-api-docs-mcp-server:$VERSION" \
    --push .

echo "--- Docker image published successfully! ---"